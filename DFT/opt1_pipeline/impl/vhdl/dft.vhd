-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dft is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    real_sample_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    real_sample_ce0 : OUT STD_LOGIC;
    real_sample_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    imag_sample_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    imag_sample_ce0 : OUT STD_LOGIC;
    imag_sample_we0 : OUT STD_LOGIC;
    imag_sample_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    imag_sample_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    imag_sample_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    imag_sample_ce1 : OUT STD_LOGIC;
    imag_sample_we1 : OUT STD_LOGIC;
    imag_sample_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    imag_sample_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    real_op_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    real_op_ce0 : OUT STD_LOGIC;
    real_op_we0 : OUT STD_LOGIC;
    real_op_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    real_op_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    real_op_ce1 : OUT STD_LOGIC;
    real_op_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    imag_op_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    imag_op_ce0 : OUT STD_LOGIC;
    imag_op_we0 : OUT STD_LOGIC;
    imag_op_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    imag_op_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    imag_op_ce1 : OUT STD_LOGIC;
    imag_op_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of dft is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dft_dft,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.799250,HLS_SYN_LAT=1048601,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1816,HLS_SYN_LUT=1776,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv21_100000 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv21_1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln10_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal cos_coefficients_table_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal cos_coefficients_table_ce0 : STD_LOGIC;
    signal cos_coefficients_table_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sin_coefficients_table_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal sin_coefficients_table_ce0 : STD_LOGIC;
    signal sin_coefficients_table_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln10_fu_204_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln10_reg_316 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln10_reg_316_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln10_reg_316_pp0_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln10_reg_316_pp0_iter4_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln10_reg_316_pp0_iter5_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln10_reg_316_pp0_iter6_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln10_reg_316_pp0_iter7_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln10_reg_316_pp0_iter8_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln10_reg_316_pp0_iter9_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln10_reg_316_pp0_iter10_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln10_reg_316_pp0_iter11_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln10_1_fu_218_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln10_1_reg_321 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln10_1_reg_321_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln10_1_reg_321_pp0_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_234_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal index_reg_336 : STD_LOGIC_VECTOR (9 downto 0);
    signal real_sample_load_reg_356 : STD_LOGIC_VECTOR (31 downto 0);
    signal cos_coefficients_table_load_reg_361 : STD_LOGIC_VECTOR (31 downto 0);
    signal sin_coefficients_table_load_reg_366 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln10_fu_265_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal real_op_addr_reg_377 : STD_LOGIC_VECTOR (9 downto 0);
    signal real_op_addr_reg_377_pp0_iter13_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal real_op_addr_reg_377_pp0_iter14_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal real_op_addr_reg_377_pp0_iter15_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal real_op_addr_reg_377_pp0_iter16_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal real_op_addr_reg_377_pp0_iter17_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal real_op_addr_reg_377_pp0_iter18_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal real_op_addr_reg_377_pp0_iter19_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal real_op_addr_reg_377_pp0_iter20_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal real_op_addr_reg_377_pp0_iter21_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal real_op_addr_reg_377_pp0_iter22_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal real_op_addr_reg_377_pp0_iter23_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imag_op_addr_reg_383 : STD_LOGIC_VECTOR (9 downto 0);
    signal imag_op_addr_reg_383_pp0_iter13_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imag_op_addr_reg_383_pp0_iter14_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imag_op_addr_reg_383_pp0_iter15_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imag_op_addr_reg_383_pp0_iter16_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imag_op_addr_reg_383_pp0_iter17_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imag_op_addr_reg_383_pp0_iter18_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imag_op_addr_reg_383_pp0_iter19_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imag_op_addr_reg_383_pp0_iter20_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imag_op_addr_reg_383_pp0_iter21_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imag_op_addr_reg_383_pp0_iter22_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imag_op_addr_reg_383_pp0_iter23_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_149_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul6_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal real_op_load_reg_394 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_153_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_399 : STD_LOGIC_VECTOR (31 downto 0);
    signal imag_op_load_reg_404 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_141_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_reg_419 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_145_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add1_reg_424 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln10_fu_256_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln15_fu_260_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_fu_270_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_fu_56 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln12_fu_240_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal n_fu_60 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar_flatten_fu_64 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln10_fu_181_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_141_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_145_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln12_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln10_1_fu_212_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_234_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_234_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_384 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component dft_fadd_32ns_32ns_32_10_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dft_fmul_32ns_32ns_32_8_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dft_mul_10s_10s_10_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component dft_cos_coefficients_table_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dft_sin_coefficients_table_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dft_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    cos_coefficients_table_U : component dft_cos_coefficients_table_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cos_coefficients_table_address0,
        ce0 => cos_coefficients_table_ce0,
        q0 => cos_coefficients_table_q0);

    sin_coefficients_table_U : component dft_sin_coefficients_table_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sin_coefficients_table_address0,
        ce0 => sin_coefficients_table_ce0,
        q0 => sin_coefficients_table_q0);

    fadd_32ns_32ns_32_10_full_dsp_1_U1 : component dft_fadd_32ns_32ns_32_10_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_141_p0,
        din1 => mul6_reg_389,
        ce => ap_const_logic_1,
        dout => grp_fu_141_p2);

    fadd_32ns_32ns_32_10_full_dsp_1_U2 : component dft_fadd_32ns_32ns_32_10_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_145_p0,
        din1 => mul_reg_399,
        ce => ap_const_logic_1,
        dout => grp_fu_145_p2);

    fmul_32ns_32ns_32_8_max_dsp_1_U3 : component dft_fmul_32ns_32ns_32_8_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln10_fu_265_p1,
        din1 => cos_coefficients_table_load_reg_361,
        ce => ap_const_logic_1,
        dout => grp_fu_149_p2);

    fmul_32ns_32ns_32_8_max_dsp_1_U4 : component dft_fmul_32ns_32ns_32_8_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln10_fu_265_p1,
        din1 => sin_coefficients_table_load_reg_366,
        ce => ap_const_logic_1,
        dout => grp_fu_153_p2);

    mul_10s_10s_10_3_1_U5 : component dft_mul_10s_10s_10_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_234_p0,
        din1 => grp_fu_234_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_234_p2);

    flow_control_loop_pipe_U : component dft_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_const_logic_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter23_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_384)) then
                if ((icmp_ln10_fu_175_p2 = ap_const_lv1_0)) then 
                    indvar_flatten_fu_64 <= add_ln10_fu_181_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_64 <= ap_const_lv21_0;
                end if;
            end if; 
        end if;
    end process;

    k_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    k_fu_56 <= ap_const_lv11_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    k_fu_56 <= add_ln12_fu_240_p2;
                end if;
            end if; 
        end if;
    end process;

    n_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    n_fu_60 <= ap_const_lv11_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    n_fu_60 <= select_ln10_1_fu_218_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add1_reg_424 <= grp_fu_145_p2;
                add_reg_419 <= grp_fu_141_p2;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                cos_coefficients_table_load_reg_361 <= cos_coefficients_table_q0;
                imag_op_addr_reg_383 <= zext_ln12_fu_270_p1(10 - 1 downto 0);
                imag_op_addr_reg_383_pp0_iter13_reg <= imag_op_addr_reg_383;
                imag_op_addr_reg_383_pp0_iter14_reg <= imag_op_addr_reg_383_pp0_iter13_reg;
                imag_op_addr_reg_383_pp0_iter15_reg <= imag_op_addr_reg_383_pp0_iter14_reg;
                imag_op_addr_reg_383_pp0_iter16_reg <= imag_op_addr_reg_383_pp0_iter15_reg;
                imag_op_addr_reg_383_pp0_iter17_reg <= imag_op_addr_reg_383_pp0_iter16_reg;
                imag_op_addr_reg_383_pp0_iter18_reg <= imag_op_addr_reg_383_pp0_iter17_reg;
                imag_op_addr_reg_383_pp0_iter19_reg <= imag_op_addr_reg_383_pp0_iter18_reg;
                imag_op_addr_reg_383_pp0_iter20_reg <= imag_op_addr_reg_383_pp0_iter19_reg;
                imag_op_addr_reg_383_pp0_iter21_reg <= imag_op_addr_reg_383_pp0_iter20_reg;
                imag_op_addr_reg_383_pp0_iter22_reg <= imag_op_addr_reg_383_pp0_iter21_reg;
                imag_op_addr_reg_383_pp0_iter23_reg <= imag_op_addr_reg_383_pp0_iter22_reg;
                index_reg_336 <= grp_fu_234_p2;
                mul6_reg_389 <= grp_fu_149_p2;
                mul_reg_399 <= grp_fu_153_p2;
                real_op_addr_reg_377 <= zext_ln12_fu_270_p1(10 - 1 downto 0);
                real_op_addr_reg_377_pp0_iter13_reg <= real_op_addr_reg_377;
                real_op_addr_reg_377_pp0_iter14_reg <= real_op_addr_reg_377_pp0_iter13_reg;
                real_op_addr_reg_377_pp0_iter15_reg <= real_op_addr_reg_377_pp0_iter14_reg;
                real_op_addr_reg_377_pp0_iter16_reg <= real_op_addr_reg_377_pp0_iter15_reg;
                real_op_addr_reg_377_pp0_iter17_reg <= real_op_addr_reg_377_pp0_iter16_reg;
                real_op_addr_reg_377_pp0_iter18_reg <= real_op_addr_reg_377_pp0_iter17_reg;
                real_op_addr_reg_377_pp0_iter19_reg <= real_op_addr_reg_377_pp0_iter18_reg;
                real_op_addr_reg_377_pp0_iter20_reg <= real_op_addr_reg_377_pp0_iter19_reg;
                real_op_addr_reg_377_pp0_iter21_reg <= real_op_addr_reg_377_pp0_iter20_reg;
                real_op_addr_reg_377_pp0_iter22_reg <= real_op_addr_reg_377_pp0_iter21_reg;
                real_op_addr_reg_377_pp0_iter23_reg <= real_op_addr_reg_377_pp0_iter22_reg;
                real_sample_load_reg_356 <= real_sample_q0;
                select_ln10_1_reg_321_pp0_iter2_reg <= select_ln10_1_reg_321;
                select_ln10_1_reg_321_pp0_iter3_reg <= select_ln10_1_reg_321_pp0_iter2_reg;
                select_ln10_reg_316_pp0_iter10_reg <= select_ln10_reg_316_pp0_iter9_reg;
                select_ln10_reg_316_pp0_iter11_reg <= select_ln10_reg_316_pp0_iter10_reg;
                select_ln10_reg_316_pp0_iter2_reg <= select_ln10_reg_316;
                select_ln10_reg_316_pp0_iter3_reg <= select_ln10_reg_316_pp0_iter2_reg;
                select_ln10_reg_316_pp0_iter4_reg <= select_ln10_reg_316_pp0_iter3_reg;
                select_ln10_reg_316_pp0_iter5_reg <= select_ln10_reg_316_pp0_iter4_reg;
                select_ln10_reg_316_pp0_iter6_reg <= select_ln10_reg_316_pp0_iter5_reg;
                select_ln10_reg_316_pp0_iter7_reg <= select_ln10_reg_316_pp0_iter6_reg;
                select_ln10_reg_316_pp0_iter8_reg <= select_ln10_reg_316_pp0_iter7_reg;
                select_ln10_reg_316_pp0_iter9_reg <= select_ln10_reg_316_pp0_iter8_reg;
                sin_coefficients_table_load_reg_366 <= sin_coefficients_table_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                select_ln10_1_reg_321 <= select_ln10_1_fu_218_p3;
                select_ln10_reg_316 <= select_ln10_fu_204_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                imag_op_load_reg_404 <= imag_op_q1;
                real_op_load_reg_394 <= real_op_q1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln10_1_fu_212_p2 <= std_logic_vector(unsigned(n_fu_60) + unsigned(ap_const_lv11_1));
    add_ln10_fu_181_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv21_1));
    add_ln12_fu_240_p2 <= std_logic_vector(unsigned(select_ln10_fu_204_p3) + unsigned(ap_const_lv11_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_384_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_384 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln10_fu_175_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln10_fu_175_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter23_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter23_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_64)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv21_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_64;
        end if; 
    end process;

    bitcast_ln10_fu_265_p1 <= real_sample_load_reg_356;
    cos_coefficients_table_address0 <= zext_ln15_fu_260_p1(10 - 1 downto 0);

    cos_coefficients_table_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cos_coefficients_table_ce0 <= ap_const_logic_1;
        else 
            cos_coefficients_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_141_p0 <= real_op_load_reg_394;
    grp_fu_145_p0 <= imag_op_load_reg_404;
    grp_fu_234_p0 <= select_ln10_fu_204_p3(10 - 1 downto 0);
    grp_fu_234_p1 <= select_ln10_1_fu_218_p3(10 - 1 downto 0);
    icmp_ln10_fu_175_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv21_100000) else "0";
    icmp_ln12_fu_198_p2 <= "1" when (k_fu_56 = ap_const_lv11_400) else "0";
    imag_op_address0 <= imag_op_addr_reg_383_pp0_iter23_reg;
    imag_op_address1 <= zext_ln12_fu_270_p1(10 - 1 downto 0);

    imag_op_ce0_assign_proc : process(ap_enable_reg_pp0_iter24, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            imag_op_ce0 <= ap_const_logic_1;
        else 
            imag_op_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    imag_op_ce1_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            imag_op_ce1 <= ap_const_logic_1;
        else 
            imag_op_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    imag_op_d0 <= add1_reg_424;

    imag_op_we0_assign_proc : process(ap_enable_reg_pp0_iter24, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            imag_op_we0 <= ap_const_logic_1;
        else 
            imag_op_we0 <= ap_const_logic_0;
        end if; 
    end process;

    imag_sample_address0 <= ap_const_lv10_0;
    imag_sample_address1 <= ap_const_lv10_0;
    imag_sample_ce0 <= ap_const_logic_0;
    imag_sample_ce1 <= ap_const_logic_0;
    imag_sample_d0 <= ap_const_lv32_0;
    imag_sample_d1 <= ap_const_lv32_0;
    imag_sample_we0 <= ap_const_logic_0;
    imag_sample_we1 <= ap_const_logic_0;
    real_op_address0 <= real_op_addr_reg_377_pp0_iter23_reg;
    real_op_address1 <= zext_ln12_fu_270_p1(10 - 1 downto 0);

    real_op_ce0_assign_proc : process(ap_enable_reg_pp0_iter24, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            real_op_ce0 <= ap_const_logic_1;
        else 
            real_op_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    real_op_ce1_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            real_op_ce1 <= ap_const_logic_1;
        else 
            real_op_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    real_op_d0 <= add_reg_419;

    real_op_we0_assign_proc : process(ap_enable_reg_pp0_iter24, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            real_op_we0 <= ap_const_logic_1;
        else 
            real_op_we0 <= ap_const_logic_0;
        end if; 
    end process;

    real_sample_address0 <= zext_ln10_fu_256_p1(10 - 1 downto 0);

    real_sample_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            real_sample_ce0 <= ap_const_logic_1;
        else 
            real_sample_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln10_1_fu_218_p3 <= 
        add_ln10_1_fu_212_p2 when (icmp_ln12_fu_198_p2(0) = '1') else 
        n_fu_60;
    select_ln10_fu_204_p3 <= 
        ap_const_lv11_0 when (icmp_ln12_fu_198_p2(0) = '1') else 
        k_fu_56;
    sin_coefficients_table_address0 <= zext_ln15_fu_260_p1(10 - 1 downto 0);

    sin_coefficients_table_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            sin_coefficients_table_ce0 <= ap_const_logic_1;
        else 
            sin_coefficients_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln10_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln10_1_reg_321_pp0_iter3_reg),64));
    zext_ln12_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln10_reg_316_pp0_iter11_reg),64));
    zext_ln15_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_reg_336),64));
end behav;
