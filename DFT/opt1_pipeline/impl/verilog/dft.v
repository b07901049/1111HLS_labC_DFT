// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dft_dft,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.799250,HLS_SYN_LAT=1048601,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1816,HLS_SYN_LUT=1776,HLS_VERSION=2022_1}" *)

module dft (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        real_sample_address0,
        real_sample_ce0,
        real_sample_q0,
        imag_sample_address0,
        imag_sample_ce0,
        imag_sample_we0,
        imag_sample_d0,
        imag_sample_q0,
        imag_sample_address1,
        imag_sample_ce1,
        imag_sample_we1,
        imag_sample_d1,
        imag_sample_q1,
        real_op_address0,
        real_op_ce0,
        real_op_we0,
        real_op_d0,
        real_op_address1,
        real_op_ce1,
        real_op_q1,
        imag_op_address0,
        imag_op_ce0,
        imag_op_we0,
        imag_op_d0,
        imag_op_address1,
        imag_op_ce1,
        imag_op_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] real_sample_address0;
output   real_sample_ce0;
input  [31:0] real_sample_q0;
output  [9:0] imag_sample_address0;
output   imag_sample_ce0;
output   imag_sample_we0;
output  [31:0] imag_sample_d0;
input  [31:0] imag_sample_q0;
output  [9:0] imag_sample_address1;
output   imag_sample_ce1;
output   imag_sample_we1;
output  [31:0] imag_sample_d1;
input  [31:0] imag_sample_q1;
output  [9:0] real_op_address0;
output   real_op_ce0;
output   real_op_we0;
output  [31:0] real_op_d0;
output  [9:0] real_op_address1;
output   real_op_ce1;
input  [31:0] real_op_q1;
output  [9:0] imag_op_address0;
output   imag_op_ce0;
output   imag_op_we0;
output  [31:0] imag_op_d0;
output  [9:0] imag_op_address1;
output   imag_op_ce1;
input  [31:0] imag_op_q1;

reg ap_idle;
reg real_sample_ce0;
reg real_op_ce0;
reg real_op_we0;
reg real_op_ce1;
reg imag_op_ce0;
reg imag_op_we0;
reg imag_op_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
wire    ap_block_state19_pp0_stage0_iter18;
wire    ap_block_state20_pp0_stage0_iter19;
wire    ap_block_state21_pp0_stage0_iter20;
wire    ap_block_state22_pp0_stage0_iter21;
wire    ap_block_state23_pp0_stage0_iter22;
wire    ap_block_state24_pp0_stage0_iter23;
wire    ap_block_state25_pp0_stage0_iter24;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln10_fu_175_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [9:0] cos_coefficients_table_address0;
reg    cos_coefficients_table_ce0;
wire   [31:0] cos_coefficients_table_q0;
wire   [9:0] sin_coefficients_table_address0;
reg    sin_coefficients_table_ce0;
wire   [31:0] sin_coefficients_table_q0;
wire    ap_block_pp0_stage0_11001;
wire   [10:0] select_ln10_fu_204_p3;
reg   [10:0] select_ln10_reg_316;
reg   [10:0] select_ln10_reg_316_pp0_iter2_reg;
reg   [10:0] select_ln10_reg_316_pp0_iter3_reg;
reg   [10:0] select_ln10_reg_316_pp0_iter4_reg;
reg   [10:0] select_ln10_reg_316_pp0_iter5_reg;
reg   [10:0] select_ln10_reg_316_pp0_iter6_reg;
reg   [10:0] select_ln10_reg_316_pp0_iter7_reg;
reg   [10:0] select_ln10_reg_316_pp0_iter8_reg;
reg   [10:0] select_ln10_reg_316_pp0_iter9_reg;
reg   [10:0] select_ln10_reg_316_pp0_iter10_reg;
reg   [10:0] select_ln10_reg_316_pp0_iter11_reg;
wire   [10:0] select_ln10_1_fu_218_p3;
reg   [10:0] select_ln10_1_reg_321;
reg   [10:0] select_ln10_1_reg_321_pp0_iter2_reg;
reg   [10:0] select_ln10_1_reg_321_pp0_iter3_reg;
wire   [9:0] grp_fu_234_p2;
reg   [9:0] index_reg_336;
reg   [31:0] real_sample_load_reg_356;
reg   [31:0] cos_coefficients_table_load_reg_361;
reg   [31:0] sin_coefficients_table_load_reg_366;
wire   [31:0] bitcast_ln10_fu_265_p1;
reg   [9:0] real_op_addr_reg_377;
reg   [9:0] real_op_addr_reg_377_pp0_iter13_reg;
reg   [9:0] real_op_addr_reg_377_pp0_iter14_reg;
reg   [9:0] real_op_addr_reg_377_pp0_iter15_reg;
reg   [9:0] real_op_addr_reg_377_pp0_iter16_reg;
reg   [9:0] real_op_addr_reg_377_pp0_iter17_reg;
reg   [9:0] real_op_addr_reg_377_pp0_iter18_reg;
reg   [9:0] real_op_addr_reg_377_pp0_iter19_reg;
reg   [9:0] real_op_addr_reg_377_pp0_iter20_reg;
reg   [9:0] real_op_addr_reg_377_pp0_iter21_reg;
reg   [9:0] real_op_addr_reg_377_pp0_iter22_reg;
reg   [9:0] real_op_addr_reg_377_pp0_iter23_reg;
reg   [9:0] imag_op_addr_reg_383;
reg   [9:0] imag_op_addr_reg_383_pp0_iter13_reg;
reg   [9:0] imag_op_addr_reg_383_pp0_iter14_reg;
reg   [9:0] imag_op_addr_reg_383_pp0_iter15_reg;
reg   [9:0] imag_op_addr_reg_383_pp0_iter16_reg;
reg   [9:0] imag_op_addr_reg_383_pp0_iter17_reg;
reg   [9:0] imag_op_addr_reg_383_pp0_iter18_reg;
reg   [9:0] imag_op_addr_reg_383_pp0_iter19_reg;
reg   [9:0] imag_op_addr_reg_383_pp0_iter20_reg;
reg   [9:0] imag_op_addr_reg_383_pp0_iter21_reg;
reg   [9:0] imag_op_addr_reg_383_pp0_iter22_reg;
reg   [9:0] imag_op_addr_reg_383_pp0_iter23_reg;
wire   [31:0] grp_fu_149_p2;
reg   [31:0] mul6_reg_389;
reg   [31:0] real_op_load_reg_394;
wire   [31:0] grp_fu_153_p2;
reg   [31:0] mul_reg_399;
reg   [31:0] imag_op_load_reg_404;
wire   [31:0] grp_fu_141_p2;
reg   [31:0] add_reg_419;
wire   [31:0] grp_fu_145_p2;
reg   [31:0] add1_reg_424;
wire   [63:0] zext_ln10_fu_256_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln15_fu_260_p1;
wire   [63:0] zext_ln12_fu_270_p1;
reg   [10:0] k_fu_56;
wire   [10:0] add_ln12_fu_240_p2;
wire    ap_loop_init;
reg   [10:0] n_fu_60;
reg   [20:0] indvar_flatten_fu_64;
wire   [20:0] add_ln10_fu_181_p2;
reg   [20:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [31:0] grp_fu_141_p0;
wire   [31:0] grp_fu_145_p0;
wire   [0:0] icmp_ln12_fu_198_p2;
wire   [10:0] add_ln10_1_fu_212_p2;
wire  signed [9:0] grp_fu_234_p0;
wire  signed [9:0] grp_fu_234_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg    ap_loop_exit_ready_pp0_iter18_reg;
reg    ap_loop_exit_ready_pp0_iter19_reg;
reg    ap_loop_exit_ready_pp0_iter20_reg;
reg    ap_loop_exit_ready_pp0_iter21_reg;
reg    ap_loop_exit_ready_pp0_iter22_reg;
reg    ap_loop_exit_ready_pp0_iter23_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_384;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_done_reg = 1'b0;
end

dft_cos_coefficients_table_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
cos_coefficients_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cos_coefficients_table_address0),
    .ce0(cos_coefficients_table_ce0),
    .q0(cos_coefficients_table_q0)
);

dft_sin_coefficients_table_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
sin_coefficients_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sin_coefficients_table_address0),
    .ce0(sin_coefficients_table_ce0),
    .q0(sin_coefficients_table_q0)
);

dft_fadd_32ns_32ns_32_10_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_10_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_141_p0),
    .din1(mul6_reg_389),
    .ce(1'b1),
    .dout(grp_fu_141_p2)
);

dft_fadd_32ns_32ns_32_10_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_10_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_145_p0),
    .din1(mul_reg_399),
    .ce(1'b1),
    .dout(grp_fu_145_p2)
);

dft_fmul_32ns_32ns_32_8_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_8_max_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(bitcast_ln10_fu_265_p1),
    .din1(cos_coefficients_table_load_reg_361),
    .ce(1'b1),
    .dout(grp_fu_149_p2)
);

dft_fmul_32ns_32ns_32_8_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_8_max_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(bitcast_ln10_fu_265_p1),
    .din1(sin_coefficients_table_load_reg_366),
    .ce(1'b1),
    .dout(grp_fu_153_p2)
);

dft_mul_10s_10s_10_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 10 ))
mul_10s_10s_10_3_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_234_p0),
    .din1(grp_fu_234_p1),
    .ce(1'b1),
    .dout(grp_fu_234_p2)
);

dft_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter23_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_384)) begin
        if ((icmp_ln10_fu_175_p2 == 1'd0)) begin
            indvar_flatten_fu_64 <= add_ln10_fu_181_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_64 <= 21'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            k_fu_56 <= 11'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            k_fu_56 <= add_ln12_fu_240_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            n_fu_60 <= 11'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            n_fu_60 <= select_ln10_1_fu_218_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add1_reg_424 <= grp_fu_145_p2;
        add_reg_419 <= grp_fu_141_p2;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
        ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
        ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
        ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
        ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
        ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        cos_coefficients_table_load_reg_361 <= cos_coefficients_table_q0;
        imag_op_addr_reg_383 <= zext_ln12_fu_270_p1;
        imag_op_addr_reg_383_pp0_iter13_reg <= imag_op_addr_reg_383;
        imag_op_addr_reg_383_pp0_iter14_reg <= imag_op_addr_reg_383_pp0_iter13_reg;
        imag_op_addr_reg_383_pp0_iter15_reg <= imag_op_addr_reg_383_pp0_iter14_reg;
        imag_op_addr_reg_383_pp0_iter16_reg <= imag_op_addr_reg_383_pp0_iter15_reg;
        imag_op_addr_reg_383_pp0_iter17_reg <= imag_op_addr_reg_383_pp0_iter16_reg;
        imag_op_addr_reg_383_pp0_iter18_reg <= imag_op_addr_reg_383_pp0_iter17_reg;
        imag_op_addr_reg_383_pp0_iter19_reg <= imag_op_addr_reg_383_pp0_iter18_reg;
        imag_op_addr_reg_383_pp0_iter20_reg <= imag_op_addr_reg_383_pp0_iter19_reg;
        imag_op_addr_reg_383_pp0_iter21_reg <= imag_op_addr_reg_383_pp0_iter20_reg;
        imag_op_addr_reg_383_pp0_iter22_reg <= imag_op_addr_reg_383_pp0_iter21_reg;
        imag_op_addr_reg_383_pp0_iter23_reg <= imag_op_addr_reg_383_pp0_iter22_reg;
        index_reg_336 <= grp_fu_234_p2;
        mul6_reg_389 <= grp_fu_149_p2;
        mul_reg_399 <= grp_fu_153_p2;
        real_op_addr_reg_377 <= zext_ln12_fu_270_p1;
        real_op_addr_reg_377_pp0_iter13_reg <= real_op_addr_reg_377;
        real_op_addr_reg_377_pp0_iter14_reg <= real_op_addr_reg_377_pp0_iter13_reg;
        real_op_addr_reg_377_pp0_iter15_reg <= real_op_addr_reg_377_pp0_iter14_reg;
        real_op_addr_reg_377_pp0_iter16_reg <= real_op_addr_reg_377_pp0_iter15_reg;
        real_op_addr_reg_377_pp0_iter17_reg <= real_op_addr_reg_377_pp0_iter16_reg;
        real_op_addr_reg_377_pp0_iter18_reg <= real_op_addr_reg_377_pp0_iter17_reg;
        real_op_addr_reg_377_pp0_iter19_reg <= real_op_addr_reg_377_pp0_iter18_reg;
        real_op_addr_reg_377_pp0_iter20_reg <= real_op_addr_reg_377_pp0_iter19_reg;
        real_op_addr_reg_377_pp0_iter21_reg <= real_op_addr_reg_377_pp0_iter20_reg;
        real_op_addr_reg_377_pp0_iter22_reg <= real_op_addr_reg_377_pp0_iter21_reg;
        real_op_addr_reg_377_pp0_iter23_reg <= real_op_addr_reg_377_pp0_iter22_reg;
        real_sample_load_reg_356 <= real_sample_q0;
        select_ln10_1_reg_321_pp0_iter2_reg <= select_ln10_1_reg_321;
        select_ln10_1_reg_321_pp0_iter3_reg <= select_ln10_1_reg_321_pp0_iter2_reg;
        select_ln10_reg_316_pp0_iter10_reg <= select_ln10_reg_316_pp0_iter9_reg;
        select_ln10_reg_316_pp0_iter11_reg <= select_ln10_reg_316_pp0_iter10_reg;
        select_ln10_reg_316_pp0_iter2_reg <= select_ln10_reg_316;
        select_ln10_reg_316_pp0_iter3_reg <= select_ln10_reg_316_pp0_iter2_reg;
        select_ln10_reg_316_pp0_iter4_reg <= select_ln10_reg_316_pp0_iter3_reg;
        select_ln10_reg_316_pp0_iter5_reg <= select_ln10_reg_316_pp0_iter4_reg;
        select_ln10_reg_316_pp0_iter6_reg <= select_ln10_reg_316_pp0_iter5_reg;
        select_ln10_reg_316_pp0_iter7_reg <= select_ln10_reg_316_pp0_iter6_reg;
        select_ln10_reg_316_pp0_iter8_reg <= select_ln10_reg_316_pp0_iter7_reg;
        select_ln10_reg_316_pp0_iter9_reg <= select_ln10_reg_316_pp0_iter8_reg;
        sin_coefficients_table_load_reg_366 <= sin_coefficients_table_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        select_ln10_1_reg_321 <= select_ln10_1_fu_218_p3;
        select_ln10_reg_316 <= select_ln10_fu_204_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        imag_op_load_reg_404 <= imag_op_q1;
        real_op_load_reg_394 <= real_op_q1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln10_fu_175_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter23_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 21'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_64;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cos_coefficients_table_ce0 = 1'b1;
    end else begin
        cos_coefficients_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter24 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        imag_op_ce0 = 1'b1;
    end else begin
        imag_op_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        imag_op_ce1 = 1'b1;
    end else begin
        imag_op_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter24 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        imag_op_we0 = 1'b1;
    end else begin
        imag_op_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter24 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        real_op_ce0 = 1'b1;
    end else begin
        real_op_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        real_op_ce1 = 1'b1;
    end else begin
        real_op_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter24 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        real_op_we0 = 1'b1;
    end else begin
        real_op_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        real_sample_ce0 = 1'b1;
    end else begin
        real_sample_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sin_coefficients_table_ce0 = 1'b1;
    end else begin
        sin_coefficients_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_1_fu_212_p2 = (n_fu_60 + 11'd1);

assign add_ln10_fu_181_p2 = (ap_sig_allocacmp_indvar_flatten_load + 21'd1);

assign add_ln12_fu_240_p2 = (select_ln10_fu_204_p3 + 11'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_384 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln10_fu_265_p1 = real_sample_load_reg_356;

assign cos_coefficients_table_address0 = zext_ln15_fu_260_p1;

assign grp_fu_141_p0 = real_op_load_reg_394;

assign grp_fu_145_p0 = imag_op_load_reg_404;

assign grp_fu_234_p0 = select_ln10_fu_204_p3[9:0];

assign grp_fu_234_p1 = select_ln10_1_fu_218_p3[9:0];

assign icmp_ln10_fu_175_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 21'd1048576) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_198_p2 = ((k_fu_56 == 11'd1024) ? 1'b1 : 1'b0);

assign imag_op_address0 = imag_op_addr_reg_383_pp0_iter23_reg;

assign imag_op_address1 = zext_ln12_fu_270_p1;

assign imag_op_d0 = add1_reg_424;

assign imag_sample_address0 = 10'd0;

assign imag_sample_address1 = 10'd0;

assign imag_sample_ce0 = 1'b0;

assign imag_sample_ce1 = 1'b0;

assign imag_sample_d0 = 32'd0;

assign imag_sample_d1 = 32'd0;

assign imag_sample_we0 = 1'b0;

assign imag_sample_we1 = 1'b0;

assign real_op_address0 = real_op_addr_reg_377_pp0_iter23_reg;

assign real_op_address1 = zext_ln12_fu_270_p1;

assign real_op_d0 = add_reg_419;

assign real_sample_address0 = zext_ln10_fu_256_p1;

assign select_ln10_1_fu_218_p3 = ((icmp_ln12_fu_198_p2[0:0] == 1'b1) ? add_ln10_1_fu_212_p2 : n_fu_60);

assign select_ln10_fu_204_p3 = ((icmp_ln12_fu_198_p2[0:0] == 1'b1) ? 11'd0 : k_fu_56);

assign sin_coefficients_table_address0 = zext_ln15_fu_260_p1;

assign zext_ln10_fu_256_p1 = select_ln10_1_reg_321_pp0_iter3_reg;

assign zext_ln12_fu_270_p1 = select_ln10_reg_316_pp0_iter11_reg;

assign zext_ln15_fu_260_p1 = index_reg_336;

endmodule //dft
